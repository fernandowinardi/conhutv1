[{"C:\\Users\\Fernando Winardi\\Downloads\\ConHut\\frontend\\src\\pages\\TagSearchPage\\TagSearchPage.js":"1","C:\\Users\\Fernando Winardi\\Downloads\\ConHut\\frontend\\src\\pages\\LikedPostPage\\LikedPostPage.js":"2","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\YourPostPage\\YourPostPage.js":"4","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\AdminPage\\AdminPage.js":"5","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\index.js":"6","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\App.js":"7","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\LandingPage.js":"8","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\SignInValidation.js":"9","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\SignUpValidation.js":"10","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\RightSideNav\\RSNav.js":"11","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\HomePage\\HomePage.js":"12","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\EditablePage\\EditablePage.js":"13","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LikedPostPage\\LikedPostPage.js":"14","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\NavBar\\NavBar.js":"15","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\CreateConfession\\CreateConfession.js":"16","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\GlobalVar\\TimerOption.js":"17","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\ChangePassword\\ChangePassword.js":"18"},{"size":13193,"mtime":1616746465840,"results":"19","hashOfConfig":"20"},{"size":13217,"mtime":1616746465838,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1612754837213,"results":"22","hashOfConfig":"23"},{"size":13037,"mtime":1616820565043,"results":"24","hashOfConfig":"23"},{"size":13595,"mtime":1616820565043,"results":"25","hashOfConfig":"23"},{"size":517,"mtime":1612754837203,"results":"26","hashOfConfig":"23"},{"size":1424,"mtime":1616672974705,"results":"27","hashOfConfig":"23"},{"size":8312,"mtime":1616820565043,"results":"28","hashOfConfig":"23"},{"size":269,"mtime":1614746421456,"results":"29","hashOfConfig":"23"},{"size":406,"mtime":1614746421458,"results":"30","hashOfConfig":"23"},{"size":1422,"mtime":1616820565044,"results":"31","hashOfConfig":"23"},{"size":14071,"mtime":1616820565043,"results":"32","hashOfConfig":"23"},{"size":8552,"mtime":1616820565168,"results":"33","hashOfConfig":"23"},{"size":13287,"mtime":1616820565043,"results":"34","hashOfConfig":"23"},{"size":4252,"mtime":1616820565168,"results":"35","hashOfConfig":"23"},{"size":4999,"mtime":1616820565044,"results":"36","hashOfConfig":"23"},{"size":251,"mtime":1614659615698,"results":"37","hashOfConfig":"23"},{"size":3002,"mtime":1616820565168,"results":"38","hashOfConfig":"23"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12me7h7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g46nyy",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Fernando Winardi\\Downloads\\ConHut\\frontend\\src\\pages\\TagSearchPage\\TagSearchPage.js",["82","83","84"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHut\\frontend\\src\\pages\\LikedPostPage\\LikedPostPage.js",["85","86","87"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\YourPostPage\\YourPostPage.js",["88","89"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\AdminPage\\AdminPage.js",["90","91","92","93"],"import React, {useEffect, useState} from 'react';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\nimport Axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table'\r\nimport parse from 'html-react-parser';\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\n\r\nimport \"./AdminPage.css\"\r\nimport 'react-notifications/lib/notifications.css';\r\nimport troll from '../../images/pentol.png';\r\n\r\nexport default function AdminPage() {\r\n    const history = useHistory();\r\n\r\n    const [role, GetUserRole] = useState('')\r\n\r\n    const [userdata, GetUserData] = useState([])\r\n    const [tagdata, GetTagData] = useState([])\r\n    const [likedata, GetLikeData] = useState([])\r\n    const [confessiondata, GetConfessionData] = useState([])\r\n    const [commentdata, GetCommentData] = useState([])\r\n    const [replydata, GetReplyData] = useState([])\r\n\r\n    const [OTStatus, SetOTStatus] = useState('') // Open Table\r\n\r\n    const usertable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"user\"\r\n        }).then((result) => {\r\n            GetUserData(result.data)\r\n            SetOTStatus(\"user\")\r\n        })\r\n    }\r\n    const tagtable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"tags\"\r\n        }).then((result) => {\r\n            GetTagData(result.data)\r\n            SetOTStatus(\"tags\")\r\n        })\r\n    }\r\n    const likestable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"likes\"\r\n        }).then((result) => {\r\n            GetLikeData(result.data)\r\n            SetOTStatus(\"likes\")\r\n        })\r\n    }\r\n    const confessiontable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"confession\"\r\n        }).then((result) => {\r\n            GetConfessionData(result.data)\r\n            SetOTStatus(\"confession\")\r\n        })\r\n    }\r\n    const commenttable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"comments\"\r\n        }).then((result) => {\r\n            GetCommentData(result.data)\r\n            SetOTStatus(\"comments\")\r\n        })\r\n    }\r\n    const repliestable = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/seetable\", {\r\n            table: \"commentcomment\"\r\n        }).then((result) => {\r\n            GetReplyData(result.data)\r\n            SetOTStatus(\"replies\")\r\n        })\r\n    }\r\n\r\n    const backToHome = () => {\r\n        history.push(\"/home\");\r\n    }\r\n\r\n    const downloadcsv = () => {\r\n        Axios.post(\"https://conhut.herokuapp.com/admin/download/csv\", {\r\n            table: OTStatus\r\n        }).then((response) => {\r\n            if (response.data.dstatus === true) {\r\n                NotificationManager.success('Download Completed!', 'Success');\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"https://conhut.herokuapp.com/getaccount\").then((result) => {\r\n            if (result.data.user !== undefined) {\r\n                if (result.data.user[0].usertype === \"admin\") {\r\n                    GetUserRole(result.data.user[0].usertype)\r\n                }\r\n                else {\r\n                    history.push(\"/\")\r\n                }\r\n            } else {\r\n                history.push(\"/\")\r\n            }\r\n        });\r\n    }, []); // remove the , [] later on \r\n    \r\n    return (\r\n        <div className=\"admin-page\">\r\n            {role === \"admin\" && <div className=\"adminAlign\">\r\n                {/*<NavBar/>*/}\r\n                <div className=\"adminRow\">\r\n                    <button className=\"backButton\" onClick={backToHome}>Home</button>\r\n                    <img className=\"pentol\" src={troll}></img>\r\n                    <h1>All User</h1>\r\n                    <img className=\"pentol\" src={troll}></img>\r\n                </div>\r\n                <div className=\"tableRow\">\r\n                    <button className=\"all-table-btn\" onClick={commenttable}>Comment Table</button>\r\n                    <button className=\"all-table-btn\" onClick={repliestable}>Comment Replies Table</button>\r\n                    <button className=\"all-table-btn\" onClick={confessiontable}>Confession Table</button>\r\n                    <button className=\"all-table-btn\" onClick={likestable}>Likes Table</button>\r\n                    <button className=\"all-table-btn\" onClick={tagtable}>Tags Table</button>\r\n                    <button className=\"all-table-btn\" onClick={usertable}>User Table</button>\r\n                </div>\r\n                {OTStatus === \"user\" && <div className=\"user-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Email</th>\r\n                            <th>AnonTag</th>\r\n                            <th>DOB</th>\r\n                            <th>UserType</th>\r\n                            <th>Join Date</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {userdata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <br/>\r\n                                <tr>\r\n                                    <th>{val.id}</th>\r\n                                    <th>{val.email}</th>\r\n                                    <th>{val.anontag}</th>\r\n                                    <th>{val.DOB}</th>\r\n                                    <th>{val.usertype}</th>\r\n                                    <th>{val.joindate}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n                {OTStatus === \"tags\" && <div className=\"tags-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Tag ID</th>\r\n                            <th>Tag</th>\r\n                            <th>Tag Count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tagdata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <hr/>\r\n                                <tr>\r\n                                    <th>{val.tag_id}</th>\r\n                                    <th>{val.tag}</th>\r\n                                    <th>{val.tagcount}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n                {OTStatus === \"likes\" && <div className=\"like-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Like ID</th>\r\n                            <th>Confess ID</th>\r\n                            <th>Like Owner</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {likedata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <hr/>\r\n                                <tr>\r\n                                    <th>{val.like_id}</th>\r\n                                    <th>{val.confess_id}</th>\r\n                                    <th>{val.like_owner}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n                {OTStatus === \"confession\" && <div className=\"confession-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Confess ID</th>\r\n                            <th>Confess Owner</th>\r\n                            <th>Confess Location</th>\r\n                            <th>Confess Title</th>\r\n                            <th>Confess Content</th>\r\n                            <th>Confess Tag</th>\r\n                            <th>Date Created</th>\r\n                            <th>Date Published</th>\r\n                            <th>Draft Status</th>\r\n                            <th>Timer</th>\r\n                            <th>Likes</th>\r\n                            <th>Comments Amount</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {confessiondata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <hr/>\r\n                                <tr>\r\n                                    <th>{val.confess_id}</th>\r\n                                    <th>{val.confess_owner}</th>\r\n                                    <th>{val.confess_location}</th>\r\n                                    <th>{val.confess_title}</th>\r\n                                    <th>{parse(val.confess_content)}</th>\r\n                                    <th>{val.confess_tag}</th>\r\n                                    <th>{val.date_created}</th>\r\n                                    <th>{val.date_published}</th>\r\n                                    <th>{val.draft}</th>\r\n                                    <th>{val.timer}</th>\r\n                                    <th>{val.likes}</th>\r\n                                    <th>{val.comnum}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n                {OTStatus === \"comments\" && <div className=\"comment-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Comment ID</th>\r\n                            <th>Confess ID</th>\r\n                            <th>Comment</th>\r\n                            <th>Reply Count</th>\r\n                            <th>Comment Owner</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {commentdata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <hr/>\r\n                                <tr>\r\n                                    <th>{val.comment_id}</th>\r\n                                    <th>{val.confess_id}</th>\r\n                                    <th>{parse(val.comment_content)}</th>\r\n                                    <th>{val.replycount}</th>\r\n                                    <th>{val.comment_owner}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n                {OTStatus === \"replies\" && <div className=\"replies-table-display\">\r\n                    <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Reply ID</th>\r\n                            <th>Comment ID</th>\r\n                            <th>Comment</th>\r\n                            <th>Comment Owner</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {replydata.map((val) => {\r\n                            return (\r\n                                <>\r\n                                <hr/>\r\n                                <tr>\r\n                                    <th>{val.cc_id}</th>\r\n                                    <th>{val.comment_id}</th>\r\n                                    <th>{parse(val.comment)}</th>\r\n                                    <th>{val.comment_owner}</th>\r\n                                </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                    </Table>\r\n                    <div className=\"download-csv-button\">\r\n                        <button class=\"dcsv-btn\" onClick={downloadcsv}>Download csv</button>\r\n                    </div>\r\n                </div>}\r\n            </div>}\r\n            <NotificationContainer/>\r\n        </div>\r\n    )\r\n}",["94","95"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\index.js",[],["96","97"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\App.js",[],["98","99"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\LandingPage.js",["100","101","102","103","104","105"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\SignInValidation.js",[],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LandingPage\\SignUpValidation.js",[],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\RightSideNav\\RSNav.js",["106"],"import React, {useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport \"./RSNav.css\";\r\n\r\nexport default function RSNav() {  \r\n    const history = useHistory();\r\n\r\n    const [taglist, GetTagList] = useState([])\r\n\r\n    const TagLink = (tag) => {\r\n        Axios.post(\"https://conhut.herokuapp.com/tag/store\", {\r\n            clicktag: tag\r\n        })\r\n        history.push(`/search/${tag}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"https://conhut.herokuapp.com/tag/get\").then((response) => {\r\n        GetTagList(response.data)\r\n        })\r\n    }, [])\r\n\r\n    return ( \r\n        <div className=\"right-side-nav\">\r\n            <div className=\"trendingTags\">\r\n                <h3>Trending Tags</h3>\r\n                <div className=\"rs-tag-list\">\r\n                    {taglist.map((val) => {\r\n                        return (\r\n                        <>\r\n                        {val.tagcount > 0 && <div className=\"tagRow\" onClick={() => TagLink(val.tag)}> \r\n                                <hr/>\r\n                                <a className=\"tagButtons\">{val.tag}<br/><label className=\"numConfession\">{val.tagcount} Confessions</label></a>\r\n                            </div>\r\n                        }\r\n                        </>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\HomePage\\HomePage.js",["107","108","109"],"import React, {useEffect, useState} from 'react';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\nimport RSNav from '../../components/RightSideNav/RSNav'\r\nimport Axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Modal from \"react-responsive-modal\";\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\r\nimport parse from 'html-react-parser';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nimport \"./HomePage.css\"\r\n\r\nexport default function HomePage() {\r\n    const history = useHistory();\r\n\r\n    const [confessionList, GetConfessionList] = useState([])\r\n    const [CommentMode, SetCommentMode] = useState(false)\r\n    const [CCMode, SetCCMode] = useState(false) // comment comment\r\n    const [confirmationMode, SetConfirmation] = useState(false)\r\n    const [CommentList, GetCommentList] = useState([])\r\n    const [comment, GetComment] = useState(\"\")\r\n    const [CC, GetCC] = useState(\"\")\r\n    const [CCList, GetCCList] = useState([])\r\n    const [CCcontent, SetCCcontent] = useState(\"\")\r\n    const [CCowner, SetCCowner] = useState(\"\")\r\n    const [CCID, SetCCID] = useState(0)\r\n    const [LikedList, GetLikedList] = useState([])\r\n    const [usertag, GetUserTag] = useState(\"\")\r\n    const [usertype, GetUserType] = useState(\"\")\r\n\r\n    const editorConfiguration = {\r\n        placeholder: \"Type your comment here...\",\r\n        toolbar: [\"bold\", \"italic\", \"underline\"]\r\n    }\r\n\r\n    const likeConfession = (conID) => {\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/like\", {\r\n            confessid: conID\r\n        })\r\n        window.location.reload(); // remove this if want to use useeffect that remove , [] (testing)\r\n    }\r\n\r\n    const openConfirmation = () => {\r\n        SetConfirmation(true)\r\n    }\r\n\r\n    const closeConfirmation = () => {\r\n        SetConfirmation(false)\r\n    }\r\n\r\n    const getComment = (con_ID) => {\r\n        SetCommentMode(true)\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/comment/get\", {\r\n            confessid: con_ID\r\n        }).then((response) => {\r\n            GetCommentList(response.data)\r\n        })\r\n    }\r\n\r\n    const postcomment = () => {\r\n        if (comment !== \"\") {\r\n            Axios.post(\"https://conhut.herokuapp.com/confession/comment/post\", {\r\n                content: comment\r\n            }).then((response) => {\r\n                if (response.data.message) {\r\n                    GetComment(\"\")\r\n                    SetCommentMode(false)\r\n                    window.location.reload();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const closemodal = () => {\r\n        SetCommentMode(false)\r\n        SetCCMode(false)\r\n    }\r\n\r\n    const clicktag = (tag) => {\r\n        Axios.post(\"https://conhut.herokuapp.com/tag/store\", {\r\n            clicktag: tag\r\n        })\r\n        history.push(`/search/${tag}`)\r\n        window.location.reload();\r\n    }\r\n\r\n    const deleteconfession = (conID) => {\r\n        Axios.delete(`https://conhut.herokuapp.com/confession/delete/${conID}`)\r\n        window.location.reload();\r\n    }\r\n\r\n    const commentcomment = (comID, content, owner) => {\r\n        SetCCMode(true);\r\n        SetCCowner(owner)\r\n        SetCCcontent(content)\r\n        SetCCID(comID)\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/comment/comment/get\", {\r\n            commentID: comID\r\n        }).then((response) => {\r\n            if (response.data) {\r\n                GetCCList(response.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    const postcc = () => {\r\n        if (CC !== \"\") {\r\n            Axios.post(\"https://conhut.herokuapp.com/confession/comment/comment/post\", {\r\n                content: CC,\r\n                commentID: CCID\r\n            }).then((response) => {\r\n                if (response.data.message) {\r\n                    GetCC(\"\")\r\n                    closemodal()\r\n                    window.location.reload();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"https://conhut.herokuapp.com/getaccount\").then((result) => {\r\n            if (result.data.loggedIn === true) {\r\n                GetUserTag(result.data.user[0].anontag)\r\n                GetUserType(result.data.user[0].usertype)\r\n                Axios.get(\"https://conhut.herokuapp.com/confession/publish/getall\").then((response) => {\r\n                    if (response.data) {\r\n                        GetConfessionList(response.data)\r\n                    }\r\n                })\r\n                Axios.get(\"https://conhut.herokuapp.com/confession/likes/compare\").then((result) => {\r\n                    if (result.data) {\r\n                        GetLikedList(result.data[0].liked_confession)\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                history.push(\"/\")\r\n            }\r\n        });\r\n    }, []); // remove the , [] later on \r\n    \r\n    return (\r\n        <div className=\"HomePage\">\r\n            <div className=\"navBarDiv\">\r\n                <NavBar/>\r\n            </div>\r\n            <div className=\"mainContainer\">\r\n                <div className=\"homepageContainer\">\r\n                \r\n                    <div className=\"homeHeader\">\r\n                        <h1>Home</h1>\r\n                    </div>\r\n                \r\n                \r\n                    {confessionList.map((val) => {\r\n                        return (\r\n                            <>\r\n                            <div className=\"displayCard\">\r\n                                <div className=\"confessOwner\">\r\n                                    <label className=\"owner\">Confessed by: <b>{val.confess_owner}</b></label>\r\n                                </div>\r\n\r\n                                <div className=\"confessLocation\">\r\n                                    <label>Happened at: <a className=\"location\">{val.confess_location}</a></label>                               \r\n                                </div>\r\n\r\n                                <div className=\"confessTime\">\r\n                                    Posted at: {val.date_published.substring(0,10)}\r\n                                </div>\r\n\r\n                                <div className=\"confessTitle\">\r\n                                    <label className=\"title\">{val.confess_title} </label>\r\n                                    \r\n                                </div>\r\n                                \r\n                                <div className=\"confessContent\">\r\n                                    <p>{parse(val.confess_content)}</p>\r\n                                </div>\r\n\r\n                                <div className=\"like-area\">\r\n                                    {LikedList.includes(val.confess_id) === false && <i className=\"fa fa-heart liked\" onClick={() => likeConfession(val.confess_id)}> </i>}\r\n                                    {LikedList.includes(val.confess_id) === true && <i className=\"fa fa-heart unliked\" onClick={() => likeConfession(val.confess_id)}> </i>}\r\n                                    <label> {val.likes}</label>\r\n                                </div>\r\n\r\n                                <div className=\"comment-area\">\r\n                                    <i className=\"fa fa-comment\" onClick={() => getComment(val.confess_id)}></i>\r\n                                    <label> {val.comnum}</label>\r\n                                </div>\r\n\r\n                                <div className=\"block1\"></div>\r\n\r\n                                <div className=\"confessTags\">\r\n                                    <label>Tags: </label>\r\n                                    {val.confess_tag.map((value) => {\r\n                                        return(\r\n                                            <button className=\"tag-btn\" onClick={() => clicktag(value)}>{value}</button>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n\r\n                                {((usertag === val.confess_owner) === true || usertype === \"admin\")&& <i className=\"fa fa-trash\" onClick={openConfirmation}> Delete</i>}\r\n                                {confirmationMode === true && <div>\r\n                                    <Modal open={true} onClose={closeConfirmation} showCloseIcon={false} classNames={{\r\n                                        overlay: 'customOverlay',\r\n                                        modal: 'customModal'\r\n                                    }}>\r\n                                        <div className=\"deleteContainer\">\r\n                                            <p>Are you sure you want to delete your confession?</p>\r\n                                            <button className=\"deleteBtn\" onClick={() => deleteconfession(val.confess_id)}>Delete</button>\r\n                                            <button className=\"deleteCancelBtn\" onClick={closeConfirmation}>Cancel</button>\r\n                                        </div>\r\n                                        \r\n                                    </Modal>\r\n\r\n                                    </div>} \r\n\r\n                                {CommentMode === true && <div>\r\n                                    <Modal open={true} onClose={closemodal} showCloseIcon={false}classNames={{\r\n                                        overlay: 'customOverlay3',\r\n                                        modal: 'customModal3',\r\n                                    }}>\r\n                                        <CKEditor\r\n                                            editor = { Editor }\r\n                                            data = \"\"\r\n                                            config = {editorConfiguration}\r\n                                            onChange = {(event, editor) => {\r\n                                                const data = editor.getData()\r\n                                                GetComment(data);\r\n                                            }}                       \r\n                                        />\r\n                                        <button className=\"commentBtn\" onClick={postcomment}>Enter</button> \r\n                                        <div className=\"all-comments\">\r\n                                            <h3>Comments:</h3>\r\n                                            {CommentList.map((value) => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <div>\r\n                                                            <label className=\"commentOwner\">{value.comment_owner} said:</label>\r\n                                                            <a onClick={() => commentcomment(value.comment_id, value.comment_content, value.comment_owner)}>Reply...  ({value.replycount})</a>\r\n                                                        </div>\r\n                                                        <p className=\"commentContent\">{parse(value.comment_content)}</p>\r\n                                                        <hr></hr>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                        </div>\r\n                                    </Modal>\r\n                                </div>}\r\n                                {CCMode === true && <div>\r\n                                    <Modal open={true} onClose={closemodal}>\r\n                                        <div>\r\n                                            <label className=\"commentOwner\">Replying to <u>{CCowner}'s</u> comment:</label>\r\n                                            <p className=\"commentContent\">{parse(CCcontent)}</p>\r\n                                            <hr></hr>\r\n                                        </div>\r\n                                        <div>\r\n                                            <CKEditor\r\n                                                editor = { Editor }\r\n                                                data = \"\"\r\n                                                config = {editorConfiguration}\r\n                                                onChange = {(event, editor) => {\r\n                                                    const data = editor.getData()\r\n                                                    GetCC(data);\r\n                                                }}    \r\n                                            />\r\n                                            <button className=\"commentBtn\" onClick={postcc}>Enter</button>\r\n                                        </div>\r\n                                        <div className=\"all-replies\">\r\n                                            <h3>Replies:</h3>\r\n                                            {CCList.map((value) => {\r\n                                                return (\r\n                                                    <>\r\n                                                    <div>\r\n                                                        <label className=\"commentOwner\"><u>{value.comment_owner}</u> comment:</label>\r\n                                                        <p className=\"commentContent\">{parse(value.comment)}</p>\r\n                                                        <hr></hr>\r\n                                                    </div>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                        </div>\r\n                                    </Modal>\r\n                                </div>}\r\n                            </div>\r\n                            </>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"rightNav\">\r\n                    <RSNav/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\EditablePage\\EditablePage.js",["110","111","112","113","114","115"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\pages\\LikedPostPage\\LikedPostPage.js",["116","117","118"],"import React, {useEffect, useState} from 'react';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\nimport Axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Modal from \"react-responsive-modal\";\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\r\nimport parse from 'html-react-parser';\r\n\r\nimport \"./LikedPostPage.css\"\r\n\r\nexport default function LikedPostPage() {\r\n    const history = useHistory();\r\n\r\n    const [confessionList, GetConfessionList] = useState([])\r\n    const [CommentMode, SetCommentMode] = useState(false)\r\n    const [CCMode, SetCCMode] = useState(false) // comment comment\r\n    const [confirmationMode, SetConfirmation] = useState(false)\r\n    const [CommentList, GetCommentList] = useState([])\r\n    const [comment, GetComment] = useState(\"\")\r\n    const [CC, GetCC] = useState(\"\")\r\n    const [CCList, GetCCList] = useState([])\r\n    const [CCcontent, SetCCcontent] = useState(\"\")\r\n    const [CCowner, SetCCowner] = useState(\"\")\r\n    const [CCID, SetCCID] = useState(0)\r\n    const [LikedList, GetLikedList] = useState([])\r\n    const [usertag, GetUserTag] = useState(\"\")\r\n    const [usertype, GetUserType] = useState(\"\")\r\n\r\n    const editorConfiguration = {\r\n        placeholder: \"Type your comment here...\",\r\n        toolbar: [\"bold\", \"italic\", \"underline\"]\r\n    }\r\n\r\n    const likeConfession = (conID) => {\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/like\", {\r\n            confessid: conID\r\n        })\r\n        window.location.reload(); // remove this if want to use useeffect that remove , [] (testing)\r\n    }\r\n\r\n    const openConfirmation = () => {\r\n        SetConfirmation(true)\r\n    }\r\n\r\n    const closeConfirmation = () => {\r\n        SetConfirmation(false)\r\n    }\r\n\r\n    const getComment = (con_ID) => {\r\n        SetCommentMode(true)\r\n        console.log(con_ID)\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/comment/get\", {\r\n            confessid: con_ID\r\n        }).then((response) => {\r\n            GetCommentList(response.data)\r\n        })\r\n    }\r\n\r\n    const postcomment = () => {\r\n        if (comment !== \"\") {\r\n            Axios.post(\"https://conhut.herokuapp.com/confession/comment/post\", {\r\n                content: comment\r\n            }).then((response) => {\r\n                if (response.data.message) {\r\n                    GetComment(\"\")\r\n                    SetCommentMode(false)\r\n                    window.location.reload();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const closemodal = () => {\r\n        SetCommentMode(false)\r\n        SetCCMode(false)\r\n    }\r\n\r\n    const clicktag = (tag) => {\r\n        Axios.post(\"https://conhut.herokuapp.com/tag/store\", {\r\n            clicktag: tag\r\n        })\r\n        history.push(`/search/${tag}`)\r\n        window.location.reload();\r\n    }\r\n\r\n    const deleteconfession = (conID) => {\r\n        Axios.delete(`https://conhut.herokuapp.com/confession/delete/${conID}`)\r\n        window.location.reload();\r\n    }\r\n\r\n    const commentcomment = (comID, content, owner) => {\r\n        SetCCMode(true);\r\n        SetCCowner(owner)\r\n        SetCCcontent(content)\r\n        SetCCID(comID)\r\n        Axios.post(\"https://conhut.herokuapp.com/confession/comment/comment/get\", {\r\n            commentID: comID\r\n        }).then((response) => {\r\n            if (response.data) {\r\n                GetCCList(response.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    const postcc = () => {\r\n        if (CC !== \"\") {\r\n            Axios.post(\"https://conhut.herokuapp.com/confession/comment/comment/post\", {\r\n                content: CC,\r\n                commentID: CCID\r\n            }).then((response) => {\r\n                if (response.data.message) {\r\n                    GetCC(\"\")\r\n                    closemodal()\r\n                    window.location.reload();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"https://conhut.herokuapp.com/getaccount\").then((result) => {\r\n            if (result.data.loggedIn === true) {\r\n                GetUserTag(result.data.user[0].anontag)\r\n                GetUserType(result.data.user[0].usertype)\r\n                Axios.get(\"https://conhut.herokuapp.com/confession/userliked/getall\").then((response) => {\r\n                    if (response.data) {\r\n                        GetConfessionList(response.data)\r\n                    }\r\n                })\r\n                Axios.get(\"https://conhut.herokuapp.com/confession/likes/compare\").then((result) => {\r\n                    if (result.data) {\r\n                        GetLikedList(result.data[0].liked_confession)\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                history.push(\"/\")\r\n            }\r\n        });\r\n    }, []); // remove the , [] later on \r\n    \r\n    return (\r\n        <div className=\"liked-post-page\">\r\n            <div className=\"navBarDiv\">\r\n                <NavBar/>\r\n            </div>\r\n            <div className=\"homeHeader\">\r\n                <h1 className=\"header\">Your Liked Confession</h1>\r\n            </div>\r\n            <div className=\"homepageContainer\">\r\n                {confessionList.map((val) => {\r\n                    return (\r\n                        <>\r\n                        <div className=\"displayCard\">\r\n                            <div className=\"confessOwner\">\r\n                                <label className=\"owner\">Confessed by: <b>{val.confess_owner}</b></label>\r\n                            </div>\r\n\r\n                            <div className=\"confessLocation\">\r\n                                <label>Happened at: <a className=\"location\">{val.confess_location}</a></label>                               \r\n                            </div>\r\n\r\n                            <div className=\"confessTime\">\r\n                                Posted at: {val.date_published.substring(0,10)}\r\n                            </div>\r\n\r\n                            <div className=\"confessTitle\">\r\n                                <label className=\"title\">{val.confess_title} </label>\r\n                                \r\n                            </div>\r\n                            \r\n                            <div className=\"confessContent\">\r\n                                <p>{parse(val.confess_content)}</p>\r\n                            </div>\r\n\r\n                            <div className=\"like-area\">\r\n                                {LikedList.includes(val.confess_id) === false && <i className=\"fa fa-heart liked\" onClick={() => likeConfession(val.confess_id)}> </i>}\r\n                                {LikedList.includes(val.confess_id) === true && <i className=\"fa fa-heart unliked\" onClick={() => likeConfession(val.confess_id)}> </i>}\r\n                                <label> {val.likes}</label>\r\n                            </div>\r\n\r\n                            <div className=\"comment-area\">\r\n                                <i className=\"fa fa-comment\" onClick={() => getComment(val.confess_id)}></i>\r\n                                <label> {val.comnum}</label>\r\n                            </div>\r\n\r\n                            <div className=\"block1\"></div>\r\n\r\n                            <div className=\"confessTags\">\r\n                                <label>Tags: </label>\r\n                                {val.confess_tag.map((value) => {\r\n                                    return(\r\n                                        <button className=\"tag-btn\" onClick={() => clicktag(value)}>{value}</button>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                            {((usertag === val.confess_owner) === true || usertype === \"admin\")&& <i className=\"fa fa-trash\" onClick={openConfirmation}> Delete</i>}\r\n                            {confirmationMode === true && <div>\r\n                                <Modal open={true} onClose={closeConfirmation} showCloseIcon={false} classNames={{\r\n                                    overlay: 'customOverlay',\r\n                                    modal: 'customModal'\r\n                                }}>\r\n                                    <div className=\"deleteContainer\">\r\n                                        <p>Are you sure you want to delete your confession?</p>\r\n                                        <button className=\"deleteBtn\" onClick={() => deleteconfession(val.confess_id)}>Delete</button>\r\n                                        <button className=\"deleteCancelBtn\" onClick={closeConfirmation}>Cancel</button>\r\n                                    </div>\r\n                                    \r\n                                </Modal>\r\n\r\n                                </div>}    \r\n\r\n                            {CommentMode === true && <div>\r\n                                <Modal open={true} onClose={closemodal} showCloseIcon={false}classNames={{\r\n                                    overlay: 'customOverlay3',\r\n                                    modal: 'customModal3',\r\n                                }}>\r\n                                    <CKEditor\r\n                                        editor = { Editor }\r\n                                        data = \"\"\r\n                                        config = {editorConfiguration}\r\n                                        onChange = {(event, editor) => {\r\n                                            const data = editor.getData()\r\n                                            GetComment(data);\r\n                                        }}                       \r\n                                    />\r\n                                    <button className=\"commentBtn\" onClick={postcomment}>Enter</button> \r\n                                    <div className=\"all-comments\">\r\n                                        <h3>Comments:</h3>\r\n                                        {CommentList.map((value) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <div>\r\n                                                        <label className=\"commentOwner\">{value.comment_owner} said:</label>\r\n                                                        <a onClick={() => commentcomment(value.comment_id, value.comment_content, value.comment_owner)}>Reply...  ({value.replycount})</a>\r\n                                                    </div>\r\n                                                    <p className=\"commentContent\">{parse(value.comment_content)}</p>\r\n                                                    <hr></hr>\r\n                                                </>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                </Modal>\r\n                            </div>}\r\n                            {CCMode === true && <div>\r\n                                <Modal open={true} onClose={closemodal}>\r\n                                    <div>\r\n                                        <label className=\"commentOwner\">Replying to <u>{CCowner}'s</u> comment:</label>\r\n                                        <p className=\"commentContent\">{parse(CCcontent)}</p>\r\n                                        <hr></hr>\r\n                                    </div>\r\n                                    <div>\r\n                                        <CKEditor\r\n                                            editor = { Editor }\r\n                                            data = \"\"\r\n                                            config = {editorConfiguration}\r\n                                            onChange = {(event, editor) => {\r\n                                                const data = editor.getData()\r\n                                                GetCC(data);\r\n                                            }}    \r\n                                        />\r\n                                        <button className=\"commentBtn\" onClick={postcc}>Enter</button>\r\n                                    </div>\r\n                                    <div className=\"all-replies\">\r\n                                        <h3>Replies:</h3>\r\n                                        {CCList.map((value) => {\r\n                                            return (\r\n                                                <>\r\n                                                <div>\r\n                                                    <label className=\"commentOwner\"><u>{value.comment_owner}</u> comment:</label>\r\n                                                    <p className=\"commentContent\">{parse(value.comment)}</p>\r\n                                                    <hr></hr>\r\n                                                </div>\r\n                                                </>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                </Modal>\r\n                            </div>}\r\n                        </div>\r\n                        </>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\NavBar\\NavBar.js",["119","120","121","122","123"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\CreateConfession\\CreateConfession.js",["124"],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\GlobalVar\\TimerOption.js",[],"C:\\Users\\Fernando Winardi\\Downloads\\ConHutV1\\frontend\\src\\components\\ChangePassword\\ChangePassword.js",["125"],{"ruleId":"126","severity":1,"message":"127","line":143,"column":8,"nodeType":"128","endLine":143,"endColumn":10,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":163,"column":53,"nodeType":"132","endLine":163,"endColumn":77},{"ruleId":"130","severity":1,"message":"131","line":239,"column":57,"nodeType":"132","endLine":239,"endColumn":153},{"ruleId":"126","severity":1,"message":"127","line":142,"column":8,"nodeType":"128","endLine":142,"endColumn":10,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"131","line":162,"column":53,"nodeType":"132","endLine":162,"endColumn":77},{"ruleId":"130","severity":1,"message":"131","line":237,"column":57,"nodeType":"132","endLine":237,"endColumn":153},{"ruleId":"126","severity":1,"message":"127","line":141,"column":8,"nodeType":"128","endLine":141,"endColumn":10,"suggestions":"134"},{"ruleId":"130","severity":1,"message":"131","line":238,"column":57,"nodeType":"132","endLine":238,"endColumn":153},{"ruleId":"135","severity":1,"message":"136","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":103,"column":8,"nodeType":"128","endLine":103,"endColumn":10,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":111,"column":21,"nodeType":"132","endLine":111,"endColumn":57},{"ruleId":"140","severity":1,"message":"141","line":113,"column":21,"nodeType":"132","endLine":113,"endColumn":57},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"142","replacedBy":"146"},{"ruleId":"144","replacedBy":"147"},{"ruleId":"142","replacedBy":"148"},{"ruleId":"144","replacedBy":"149"},{"ruleId":"140","severity":1,"message":"141","line":94,"column":17,"nodeType":"132","endLine":94,"endColumn":51},{"ruleId":"140","severity":1,"message":"141","line":101,"column":17,"nodeType":"132","endLine":101,"endColumn":51},{"ruleId":"130","severity":1,"message":"131","line":103,"column":21,"nodeType":"132","endLine":103,"endColumn":40},{"ruleId":"130","severity":1,"message":"131","line":139,"column":21,"nodeType":"132","endLine":139,"endColumn":47},{"ruleId":"130","severity":1,"message":"131","line":145,"column":70,"nodeType":"132","endLine":145,"endColumn":114},{"ruleId":"130","severity":1,"message":"131","line":196,"column":64,"nodeType":"132","endLine":196,"endColumn":108},{"ruleId":"130","severity":1,"message":"131","line":35,"column":33,"nodeType":"132","endLine":35,"endColumn":59},{"ruleId":"126","severity":1,"message":"127","line":143,"column":8,"nodeType":"128","endLine":143,"endColumn":10,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"131","line":167,"column":57,"nodeType":"132","endLine":167,"endColumn":81},{"ruleId":"130","severity":1,"message":"131","line":243,"column":61,"nodeType":"132","endLine":243,"endColumn":157},{"ruleId":"135","severity":1,"message":"151","line":8,"column":8,"nodeType":"137","messageId":"138","endLine":8,"endColumn":13},{"ruleId":"135","severity":1,"message":"152","line":22,"column":24,"nodeType":"137","messageId":"138","endLine":22,"endColumn":33},{"ruleId":"135","severity":1,"message":"153","line":29,"column":12,"nodeType":"137","messageId":"138","endLine":29,"endColumn":23},{"ruleId":"126","severity":1,"message":"154","line":60,"column":8,"nodeType":"128","endLine":60,"endColumn":10,"suggestions":"155"},{"ruleId":"135","severity":1,"message":"156","line":67,"column":11,"nodeType":"137","messageId":"138","endLine":67,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":165,"column":37,"nodeType":"132","endLine":165,"endColumn":63},{"ruleId":"126","severity":1,"message":"127","line":142,"column":8,"nodeType":"128","endLine":142,"endColumn":10,"suggestions":"157"},{"ruleId":"130","severity":1,"message":"131","line":162,"column":53,"nodeType":"132","endLine":162,"endColumn":77},{"ruleId":"130","severity":1,"message":"131","line":237,"column":57,"nodeType":"132","endLine":237,"endColumn":153},{"ruleId":"126","severity":1,"message":"158","line":55,"column":8,"nodeType":"128","endLine":55,"endColumn":10,"suggestions":"159"},{"ruleId":"140","severity":1,"message":"141","line":61,"column":74,"nodeType":"132","endLine":61,"endColumn":113},{"ruleId":"130","severity":1,"message":"131","line":73,"column":21,"nodeType":"132","endLine":73,"endColumn":64},{"ruleId":"130","severity":1,"message":"131","line":76,"column":21,"nodeType":"132","endLine":76,"endColumn":68},{"ruleId":"130","severity":1,"message":"160","line":81,"column":37,"nodeType":"132","endLine":81,"endColumn":108},{"ruleId":"135","severity":1,"message":"161","line":14,"column":11,"nodeType":"137","messageId":"138","endLine":14,"endColumn":18},{"ruleId":"130","severity":1,"message":"131","line":74,"column":26,"nodeType":"132","endLine":74,"endColumn":46},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["162"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["163"],["164"],"no-unused-vars","'NavBar' is defined but never used.","Identifier","unusedVar",["165"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-native-reassign",["166"],"no-negated-in-lhs",["167"],["166"],["167"],["166"],["167"],["168"],"'Modal' is defined but never used.","'SetPubSuc' is assigned a value but never used.","'modalStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'content' and 'history'. Either include them or remove the dependency array.",["169"],"'closemodal' is assigned a value but never used.",["170"],"React Hook useEffect has a missing dependency: 'role'. Either include it or remove the dependency array.",["171"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'history' is assigned a value but never used.",{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},{"desc":"172","fix":"175"},{"desc":"172","fix":"176"},"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"177"},{"desc":"178","fix":"179"},{"desc":"172","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [history]",{"range":"183","text":"184"},{"range":"185","text":"184"},{"range":"186","text":"184"},{"range":"187","text":"184"},{"range":"188","text":"184"},"Update the dependencies array to be: [content, history]",{"range":"189","text":"190"},{"range":"191","text":"184"},"Update the dependencies array to be: [role]",{"range":"192","text":"193"},[4757,4759],"[history]",[4727,4729],[4763,4765],[3414,3416],[4862,4864],[2166,2168],"[content, history]",[4797,4799],[1648,1650],"[role]"]