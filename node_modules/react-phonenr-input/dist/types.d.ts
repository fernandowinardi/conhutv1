import { CountryCode } from 'libphonenumber-js';
export declare type Region = 'asia' | 'europe' | 'africa' | 'north-africa' | 'oceania' | 'america' | 'carribean' | 'south-america' | 'ex-ussr' | 'european-union' | 'middle-east' | 'central-america' | 'north-america';
export declare type IsoCode = CountryCode | 'INTL';
export interface ICountry {
    name: string;
    regions: Region[];
    iso2: IsoCode;
    dialCode: string;
    hasAreaCodes?: boolean;
    isAreaCode?: boolean;
}
export interface IPhoneNumberObj {
    phoneNumber: string;
    country: Omit<ICountry, 'hasAreaCodes' | 'isAreaCode' | 'dialCode' | 'regions'>;
}
export declare type PhoneNumber = string | IPhoneNumberObj;
export declare type Identifyer = 'name' | 'iso2' | 'dialCode';
export declare type NumberFormat = 'INTERNATIONAL' | 'NATIONAL';
export declare type DetectMobile = boolean | null | RegExpMatchArray;
export declare type FindCountryBy = (identifyer: Identifyer, item: IsoCode | string) => ICountry;
export declare type GetCountry = (phoneNumber: string) => ICountry | undefined;
export declare type GetPreferredCountries = (preferredCountries: IsoCode[]) => ICountry[];
export declare type GetInitialCountry = (defaultCountry?: IsoCode, preferredCountries?: IsoCode[], regions?: Region | Region[]) => ICountry;
export declare type GetCountryList = (preferredCountries?: IsoCode[], regions?: Region | Region[]) => ICountry[];
export declare type FormatNumber = (pohneNumber: string, format: NumberFormat, iso2: CountryCode) => string;
